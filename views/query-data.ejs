<!DOCTYPE html>
<html lang = "en">
<% include partials/page/jsdefaults.ejs %>
<script type = "text/javascript" src = "assets/js/xlsx.core.min.js"></script>
<script type = "text/javascript" src = "assets/js/FileSaver.js"></script>

<script>
    function doit() {
        export_table_to_excel('table');
    }
</script>
<head>
    <link rel = "stylesheet" href = "assets/css/checkout.css"
          rel = "stylesheet">
    <% include partials/page/head.ejs %>

</head>
<body>
<% include partials/page/navbar.ejs %>

<section class = "hero small-hero">
    <div class = "bg-overlay">
        <div class = "container" style = "">
            <div class = "intro-wrap">
                <h1 class = "intro-title">Query Data</h1>
            </div>
        </div>
    </div>
</section>


<section class = "main container">
    <div class = "container" ng-app = "queryDataModule"
         ng-controller = "queryDataController" ng-cloak>
        Query Students Points Between
        Min
        <input ng-model = "queryForm.min" class = "form-control"
               style = "margin-bottom: 10px"
                type = "text"
               placeholder = "Min" maxlength = "4"
               onclick = "clickEntry(this);">

        <input ng-model = "queryForm.max" class = "form-control"
               style = "margin-bottom: 10px"
                type = "text"
               placeholder = "Max" maxlength = "4"
               onclick = "clickEntry(this);">
        <input type = "submit" value = "Query" ng-click = "queryFunction()">

        <p class = "text-center" ng-show = "loading">
            <span class = "fa fa-spinner fa-spin fa-3x"></span>
        </p>

        <input ng-if ="queried" type="submit" value="Export to Excel!" ng-click="saveExcelFile();">
        <table class="table" id="table" style="margin-top: 50px">
            <tr ng-if ="queried">
                <td>gtID</td>
                <td>First Name</td>
                <td>Last Name</td>
                <td>Email</td>
                <td>Sum</td>
            </tr>
            <tr ng-repeat="data in queryData">
                <td>{{data.gtID}}</td>
                <td>{{data.firstName}}</td>
                <td>{{data.lastName}}</td>
                <td>{{data.email}}</td>
                <td>{{data.sum}}</td>
            </tr>
        </table>

    </div>


</section>

</body>
<script>
    angular.module('queryDataModule', ['queryDataController']);

    var queryDataController = angular.module('queryDataController', []);
    queryDataController.controller('queryDataController', ['$scope', '$http', function ($scope, $http, $window) {
        $scope.loading = false;
        $scope.queried = false;
        $scope.queryForm = {};
        $scope.queryForm.min = 0;
        $scope.queryForm.max = 999;
        $scope.queryFunction = function () {
            $scope.loading = true;
            $http.post('/api/query-data', $scope.queryForm).success(function (response) {
                $scope.queried = true;
                $scope.loading = false;
                $scope.queryData = response.queryData
            })
        }



        function generateArray(table) {
            var out = [];
            var rows = table.querySelectorAll('tr');
            var ranges = [];
            for (var R = 0; R < rows.length; ++R) {
                var outRow = [];
                var row = rows[R];
                var columns = row.querySelectorAll('td');
                for (var C = 0; C < columns.length; ++C) {
                    var cell = columns[C];
                    var colspan = cell.getAttribute('colspan');
                    var rowspan = cell.getAttribute('rowspan');
                    var cellValue = cell.innerText;
                    if(cellValue !== "" && cellValue == +cellValue) cellValue = +cellValue;

                    //Skip ranges
                    ranges.forEach(function(range) {
                        if(R >= range.s.r && R <= range.e.r && outRow.length >= range.s.c && outRow.length <= range.e.c) {
                            for(var i = 0; i <= range.e.c - range.s.c; ++i) outRow.push(null);
                        }
                    });

                    //Handle Row Span
                    if (rowspan || colspan) {
                        rowspan = rowspan || 1;
                        colspan = colspan || 1;
                        ranges.push({s:{r:R, c:outRow.length},e:{r:R+rowspan-1, c:outRow.length+colspan-1}});
                    };

                    //Handle Value
                    outRow.push(cellValue !== "" ? cellValue : null);

                    //Handle Colspan
                    if (colspan) for (var k = 0; k < colspan - 1; ++k) outRow.push(null);
                }
                out.push(outRow);
            }
            return [out, ranges];
        };

        function datenum(v, date1904) {
            if(date1904) v+=1462;
            var epoch = Date.parse(v);
            return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
        }

        function sheet_from_array_of_arrays(data, opts) {
            var ws = {};
            var range = {s: {c:10000000, r:10000000}, e: {c:0, r:0 }};
            for(var R = 0; R != data.length; ++R) {
                for(var C = 0; C != data[R].length; ++C) {
                    if(range.s.r > R) range.s.r = R;
                    if(range.s.c > C) range.s.c = C;
                    if(range.e.r < R) range.e.r = R;
                    if(range.e.c < C) range.e.c = C;
                    var cell = {v: data[R][C] };
                    if(cell.v == null) continue;
                    var cell_ref = XLSX.utils.encode_cell({c:C,r:R});

                    if(typeof cell.v === 'number') cell.t = 'n';
                    else if(typeof cell.v === 'boolean') cell.t = 'b';
                    else if(cell.v instanceof Date) {
                        cell.t = 'n'; cell.z = XLSX.SSF._table[14];
                        cell.v = datenum(cell.v);
                    }
                    else cell.t = 's';

                    ws[cell_ref] = cell;
                }
            }
            if(range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);
            return ws;
        }

        function Workbook() {
            if(!(this instanceof Workbook)) return new Workbook();
            this.SheetNames = [];
            this.Sheets = {};
        }

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        $scope.saveExcelFile = function() {
            export_table_to_excel("table");
        }
        function export_table_to_excel(id) {
            var theTable = document.getElementById(id);
            var oo = generateArray(theTable);
            var ranges = oo[1];

            /* original data */
            var data = oo[0];
            var ws_name = "SheetJS";
            console.log(data);

            var wb = new Workbook(), ws = sheet_from_array_of_arrays(data);

            /* add ranges to worksheet */
            ws['!merges'] = ranges;

            /* add worksheet to workbook */
            wb.SheetNames.push(ws_name);
            wb.Sheets[ws_name] = ws;

            var wbout = XLSX.write(wb, {bookType:'xlsx', bookSST:false, type: 'binary'});
            var MyDate = new Date();
            var formatDate = ('0' + (MyDate.getMonth()+1)).slice(-2) + ('0' + MyDate.getDate()).slice(-2) + MyDate.getFullYear();
            var fileName = $scope.queryForm.min + "_to_" + $scope.queryForm.max + '_' + formatDate;
            saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), fileName + ".xlsx")
        }


    }]);


    function clickEntry(input) {
        var disMouse = document.getElementById(input.id);
        disMouse.addEventListener("mousewheel", function (evt) {
            evt.preventDefault();
        });
    }




</script>


</html>
